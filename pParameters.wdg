#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : pParameters
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1956177eec89a181
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1-
      
      // Set of procedures managing the global and custom parameters
      
      CONSTANT
      	ForAll = -1
      END
     type : 720896
  procedures :
   -
     name : ParameterRead
     procedure_id : 1825672532847141249
     type_code : 15
     code : |1-
      // Summary: Reads the value of a given parameter
      // Syntaxe :
      //[ <Résultat> = ] ParameterRead (<sName> [, <nUserID> [, <sDefaultValue>]])
      //
      // Paramètres :
      //	sName : Name of the parameter to read
      //	nUserID (valeur par défaut=-1) : Identifier of the affected user or ForEach for a global parameter
      //	sDefaultValue (valeur par défaut="") : <specify the role of sDefaultValue>
      
      // Return value:
      // 	string: Value of the parameter
      PROCEDURE ParameterRead(sName, nUserID = ForAll, sDefaultValue = "")
      
      sValue is string
      
      GUID is string = HFSavePosition(Parameter..Name)
      
      // Searches for the parameter
      HReadSeekFirst(Parameter, KeyByUser, [sName, nUserID])
      IF HFound(Parameter) THEN
      	sValue = Parameter.Value
      ELSE
      	sValue = sDefaultValue
      END
      
      HFRestorePosition(GUID)
      
      RESULT sValue
     type : 458752
   -
     name : ParameterWrite
     procedure_id : 1825672532847206785
     type_code : 15
     code : |1-
      // Summary: Writes the value of a given parameter
      // Syntaxe :
      //ParameterWrite (<sName>, <sValue> [, <nUserID>])
      //
      // Paramètres :
      //	sName : Name of the parameter
      //	sValue : Value of the parameter
      //	nUserID (valeur par défaut=-1) : Identifier of the affected user or ForEach for a global parameter
      
      // Return value:
      PROCEDURE ParameterWrite(sName, sValue, nUserID = ForAll)
      
      GUID is string = HFSavePosition(Parameter..Name)
      
      // Searches for the parameter
      HReadSeekFirst(Parameter, KeyByUser, [sName, nUserID])
      IF HFound(Parameter) THEN	
      	Parameter.Value = sValue
      	HModify(Parameter)
      ELSE
      	// Creates the parameter
      	Parameter.Key = sName
      	Parameter.Value = sValue
      	Parameter.UserID = nUserID
      	HAdd(Parameter)
      END
      
      HFRestorePosition(GUID)
     type : 458752
   -
     name : ParameterDelete
     procedure_id : 1825672532847272321
     type_code : 15
     code : |1-
      // Summary: Deletes a given parameter
      // Syntaxe :
      //[ <Résultat> = ] ParameterDelete (<sName> [, <nUserID>])
      //
      // Paramètres :
      //	sName : Name of the parameter to delete
      //	nUserID (valeur par défaut=-1) : Identifier of the affected user or ForEach for a global parameter
      
      // Return value:
      // 	boolean: True if the parameter was deleted, False otherwise
      PROCEDURE ParameterDelete(sName, nUserID = ForAll)
      
      bReturn is boolean
      
      GUID is string = HFSavePosition(Parameter..Name)
      
      // Searches for the parameter
      HReadSeekFirst(Parameter, KeyByUser, [sName, nUserID])
      IF HFound(Parameter) THEN
      	HDelete(Parameter)
      	bReturn = True
      END
      
      HFRestorePosition(GUID)
      
      RESULT bReturn
     type : 458752
   -
     name : ConfigureList
     procedure_id : 1825672532847337857
     type_code : 15
     code : |1-
      // Summary: Lists the parameters and their value
      // Syntaxe :
      //[ <Résultat> = ] ConfigureList ( [<nUserID> [, <sKeyBeginning> [, <bWithValue>]]])
      //
      // Paramètres :
      //	nUserID (valeur par défaut=-1) : Identifier of the affected user or ForEach for a global parameter
      //	sKeyBeginning (valeur par défaut="") : Beginning of the name of the key for listing all the corresponding keys
      //	bWithValue (valeur par défaut=1) : <specify the role of bWithValue>
      
      // Return value:
      PROCEDURE ConfigureList(nUserID = ForAll, sKeyBeginning = "", bWithValue = True)
      
      sListBox is string
      
      GUID is string = HFSavePosition(Parameter..Name)
      
      IF sKeyBeginning <> "" THEN
      	
      	FOR EACH Parameter where UserID = nUserID
      		if parameter.Key [= sKeyBeginning THEN
      			sListBox += [CR] + Parameter.Key + (bWithValue ? TAB + Parameter.Value	 ELSE "")			
      		END
      	END
      	
      ELSE
      	FOR EACH Parameter WHERE UserID = nUserID
      		sListBox += [CR] + Parameter.Key + (bWithValue ? TAB + Parameter.Value	 ELSE "")
      	END	
      END
      
      
      HFRestorePosition(GUID)
      
      RESULT sListBox
     type : 458752
   -
     name : ParameterExist
     procedure_id : 1825672532847403393
     type_code : 15
     code : |1-
      // Sumary: Checks whether a parameter exists
      // Syntaxe :
      //[ <Résultat> = ] ParameterExist (<sName> [, <nUserID>])
      //
      // Paramètres :
      //	sName : Name of the parameter to read
      //	nUserID (valeur par défaut=-1) : Identifier of the affected user or ForEach for a global parameter
      
      // Return value:
      // 	boolean: True if the parameter exists, False otherwise
      PROCEDURE ParameterExist(sName, nUserID = ForAll)
      
      bExist is boolean
      
      GUID is string = HFSavePosition(Parameter..Name)
      
      // Searches for the parameter
      HSeekFirst(Parameter, KeyByUser, [sName, nUserID])
      bExist = HFound(Parameter)	
      
      HFRestorePosition(GUID)
      
      RESULT bExist
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_Collection1
resources :
 string_res :
  identifier : 0x155095be00065e9b
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
